<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.fiserv.atm.load</groupId>
	<artifactId>builder</artifactId>
	<version>1.0-SNAPSHOT</version>

	<name>load builder</name>
	<description>Example App for FiServ</description>
	<packaging>war</packaging>

	<properties>

		<!-- standard Maven properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Sencha Cmd properties -->
		<sencha-build-type>development</sencha-build-type>
		<desktop.app>Builder</desktop.app>

		<!-- Versions of dependency frameworks -->
		<servlet-api-version>3.1.0</servlet-api-version>
		<inject-version>1</inject-version>
		<slf4j-version>1.7.10</slf4j-version>
		<link-rest-version>1.14</link-rest-version>
		<cayenne-version>4.0.M2</cayenne-version>
		<jersey-version>2.16</jersey-version>
		<mysql-driver-version>5.1.25</mysql-driver-version>

		<mysql-url>jdbc:mysql://localhost/</mysql-url>
		<mysql-user>root</mysql-user>
		<mysql-password></mysql-password>
	</properties>

	<!-- Source Control -->
	<scm>
		<connection>scm:git:file:///Users/rzenetl/Documents/nhllink/code/atmloadbuilder</connection>
		<!-- <developerConnection>scm:git:ssh://git@github.com:andrus/link-rest-cms-demo.git</developerConnection> -->
		<!-- <url>https://github.com/andrus/link-rest-cms-demo</url> -->
		<tag>HEAD</tag>
	</scm>

	<!-- Dependency versions (and other specifics) for this and child (if any) projects -->
	<dependencyManagement>
		<dependencies>

			<!--
				LinkRest is a flexible model-driven REST data service framework. http://github.com/nhl/link-rest
			-->
			<dependency>
				<groupId>com.nhl.link.rest</groupId>
				<artifactId>link-rest</artifactId>
				<version>${link-rest-version}</version>
			</dependency>

			<!-- The javax.servlet package contains a number of classes and interfaces that describe and define the contracts between a servlet class and the runtime environment provided for an instance of such a class by a conforming servlet container. -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api-version}</version>
			</dependency>

			<!-- Classes and interfaces which are internal to SLF4J -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

			<!-- High-level interfaces and annotations used to create RESTful service resources. -->
			<dependency>
				<groupId>javax.ws.rs</groupId>
				<artifactId>javax.ws.rs-api</artifactId>
				<version>2.0.1</version>
			</dependency>

			<!-- DO WE NEED THIS? -->
			<!-- Jersey core Servlet 3.x implementation -->
			<dependency>
				<groupId>org.glassfish.jersey.containers</groupId>
				<artifactId>jersey-container-servlet</artifactId>
				<version>${jersey-version}</version>
			</dependency>

			<!--  -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql-driver-version}</version>
			</dependency>

			<!-- Full Cayenne runtime WITHOUT dependencies -->
			<dependency>
				<groupId>org.apache.cayenne</groupId>
				<artifactId>cayenne-server</artifactId>
				<version>${cayenne-version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>


	<!-- Dependencies for _this_ project -->
	<dependencies>

		<!-- required runtime dependencies -->
		<dependency>
			<groupId>com.nhl.link.rest</groupId>
			<artifactId>link-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cayenne</groupId>
			<artifactId>cayenne-server</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- Provided dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>

	</dependencies>


	<build>

		
		<!-- Plugin settings (mostly versioning) for this and child modules of this project -->
		<pluginManagement>
			<plugins>

				<!-- The Compiler Plugin is used to compile the sources of your project. Since 3.0, the default compiler is javax.tools.JavaCompiler (if you are using java 1.6) and is used to compile Java sources. If you want to force the plugin using javac, you must configure the plugin option forceJavacCompilerUse.

				Also note that at present the default source setting is 1.5 and the default target setting is 1.5, independently of the JDK you run Maven with. If you want to change these defaults, you should set source and target as described in Setting the -source and -target of the Java Compiler. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>

				<!-- The Source Plugin creates a jar archive of the source files of the current project. The jar file is, by default, created in the project's target directory. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<!-- The WAR Plugin is responsible for collecting all artifact dependencies, classes and resources of the web application and packaging them into a web application archive -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<warName>atmloadbuilder</warName>
					</configuration>
				</plugin>

				<!--
					Cayenne maven plugins. The follwoing goals provided:

					cayenne:cgen - Java class generator
					cayenne:cdbgen - Database schema generator
					cayenne:cdbimport - Database schema importer
				-->
				<plugin>
					<groupId>org.apache.cayenne.plugins</groupId>
					<artifactId>maven-cayenne-plugin</artifactId>
					<version>${cayenne-version}</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<!-- Plugins for this project -->
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warSourceIncludes>
						WEB-INF/**
					</warSourceIncludes>

					<webResources>
						<resource>
							<directory>${project.build.directory}/sencha-package/</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- sencha cmd build -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<configuration>
							<tasks>
								<exec executable="sencha" dir="${basedir}/src/main/webapp/apps/desktop" failonerror="true">
									<arg value="app" />
									<arg value="build" />
									<arg value="${sencha-build-type}" />
								</exec>

								<copy todir="${project.build.directory}/sencha-package/">
									<fileset dir="${project.basedir}/src/main/webapp/build/${sencha-build-type}/${desktop.app}" />
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.cayenne.plugins</groupId>
				<artifactId>maven-cayenne-plugin</artifactId>
				<version>${cayenne-version}</version>
				<dependencies>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>${mysql-driver-version}</version>
						<scope>compile</scope>
					</dependency>
				</dependencies>
				<configuration>
					<!-- these must be overridden by projects -->
					<catalog>should-override</catalog>
					<defaultPackage>should-override</defaultPackage>
					<superPkg>should-override</superPkg>
					<map>should-override</map>

					<!-- these are the same for all projects -->
					<url>${mysql-url}</url>
					<username>${mysql-user}</username>
					<password>${mysql-password}</password>
					<driver>com.mysql.jdbc.Driver</driver>
					<destDir>${project.basedir}/src/main/java</destDir>
					<excludeTables>system_patch</excludeTables>
				</configuration>
			</plugin>

			<!-- used to run project using "mvn jetty:run" -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.2.11.v20150529</version> <!-- java7 -->
				<!-- <version>9.3.0.RC1</version> --> <!-- java8 -->
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>

			<id>ormsync</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.cayenne.plugins</groupId>
						<artifactId>maven-cayenne-plugin</artifactId>
						<configuration>
							<map>${project.basedir}/src/main/resources/datamap.map.xml</map>
							<catalog>atmloadbuilder</catalog>
							<defaultPackage>com.fiserv.atm.load.cayenne</defaultPackage>
							<superPkg>com.fiserv.atm.load.cayenne.auto</superPkg>
							<excludeTables>system_patch,*_view</excludeTables>

							<!-- these are the same for all projects -->
							<url>${mysql-url}</url>
							<username>${mysql-user}</username>
							<password>${mysql-password}</password>
							<driver>com.mysql.jdbc.Driver</driver>
							<destDir>${project.basedir}/src/main/java</destDir>

						</configuration>
						<executions>
							<execution>
								<id>default-cli</id>
								<goals>
									<goal>cdbimport</goal>
									<goal>cgen</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
